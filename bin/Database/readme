Review:
1. How to declare a enum type

enum RECORD_TYPE {
   REGULAR, POISON 
}


2. Class Hashtable

All Implemented Interfaces:
Cloneable, ***Map****, Serializable


3. Start Thread

public class OutputFile implements Runnable{
	private final BlockingQueue<Record> in;
	OutputFile(BlockingQueue<Record> in){
		this.in = in;
	}
	public void run(){}
}
OutputFile outFile = new OutputFile(q5);
Thread t1 = new Thread(apartments);
t1.start();


4. PriorityQueue

	Comparator<Record> leftComparator = 
				new Comparator<Record>(){
			public int compare(Record r1, Record r2){
				String v1 = r1.getTuple().get(leftKeyName);
				String v2 = r2.getTuple().get(leftKeyName);
				return v1.compareTo(v2);
			}
		};
	leftq = new PriorityQueue<Record>(10,leftComparator)
	
5. Read File

FileInputStream fstream = new FileInputStream(fileName + ".tbl");
// Get the object of DataInputStream
DataInputStream in = new DataInputStream(fstream);
BufferedReader br = new BufferedReader(new InputStreamReader(in));
String strLine;
// Read File Line By Line
while ((strLine = br.readLine()) != null) {
	
}
//Close the input stream
in.close();
			
6. Write File

		try {
			File file = new File("result.tbl");
			if(!file.exists()) {
				file.createNewFile();
			} 
			FileOutputStream oFile = new FileOutputStream(file, false); 
			DataOutputStream out =  new DataOutputStream(oFile);
			BufferedWriter br = new BufferedWriter(new OutputStreamWriter(out));
			while(true){
				try{
					Record r = in.take();
					//the thread will stop here, if condition is satisfied
					if(r.type == RECORD_TYPE.POISON) break;
					br.write(r.toString());
					br.newLine();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} 
			}
			br.close();
	   }catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
3. s1.compareTo(s2);
	compare first char not same => compare second char
	So, "10" < "2"
4. priority queue min heap by default


Learn:
1. How to use blocking queue

a. A BlockingQueue does not intrinsically support any kind of "close" or "shutdown" operation 
to indicate that no more items will be added. 
A common tactic is for producers to insert special end-of-stream or poison objects, that are interpreted accordingly when taken by consumers.
b.BlockingQueue can safely be used with multiple producers and multiple consumers.


2. Hashtable putAll(Map t)

public void putAll(Map t)
Copies all of the mappings from the specified Map to this Hashtable 
These mappings will replace any mappings that this Hashtable had for 
any of the keys currently in the specified Map.
